Questions for meeting:
1. in check_file_invariant in CounterexampleFinder, does run modify bdag?

Crucial
1. Write thesis
    1.1. outline
    1.2. rest

Necessary
1. Complete language
    1.1. Fix new frame for {} nesting
    1.2. complete boolean predicates
    1.3. implement integer expressions
2. Incorporate numerical solver
3. Fix memory leaks (remove all boolean dag copies that are not used).
    //there is code in boolean_node for memory leaks
    //use SCHECKMEM in boolean_node and boolean_dag
    //use shared_pointer
4. Dynamic typing
    DONE.
    add 'any' type.
5. Make frontend spit harnesses for each function when using solver language.
    5.1. be careful of structs as inputs.

Good to do
Refactor interpreter to use classes and subclasses instead of switches for different values/methods (like in SolverLanguage.h).

Medium term
1. refactor backend code to look like solver language (meaning the signatures of the functions concretize and file).
    1.1 Compile directly to Cpp rather than interpreting program
2. Implement bottom-up-and-top-down STUN for boolean synthesis in solver language
3. Implement classes
4. Allow for construction of sketches during runtime.

Other medium terms
1. Holes in solver program and meta-solver programs

Longer term
1. Implement other domains using solver language
    1.1. Karel
    1.2 compression
        1.2.1 Geometric images
        1.2.2 Timeseries
2. How to integrate with hardcoder and parallelism
    1. Have doallparis be a module.
    2. ...