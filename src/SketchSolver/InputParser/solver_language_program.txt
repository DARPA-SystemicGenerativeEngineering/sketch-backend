Solver void solver_main()
{
	File file = File(file_name); // The dataset is stored in a File; File is a native construct.
	int num_trials = 100; //hyperparameter
	int num_rows = 10; //hyperparameter
	// invoke the best_effort_synthesis routine on main - the harness on which we want to do best effort synthesis
	Solution solution = best_effort_synthesis(harness, file, num_trials, num_rows);
	//finally concretize the main harness
	main = main.concretize(solution);
}

Solver Solution best_effort_synthesis(Harness harness, File file, int num_trials, int num_rows) {
	Solution best_program;
	int best_score = 0;

    int trial_id = 0;
    while(trial_id < num_trials)
	//for(int trial_id = 0; trial_id<num_trials; trial_id++)
	{
		File subset_file = file.produce_subset_file(num_rows); //sample subset of the rows
		Solution solution = SATSolver(harness, subset_file); // invoke the Sketch Solver on the harness
		Program program = harness.concretize(solution); // create a program that uses the solution to fill in the holes of the harness.
		int score = count_passing_inputs(solution, file); // count how many input-output examples are solved with this solution
		if(score > best_score) // update the best_solution
		{
			best_solution = solution;
		};
		trial_id = plus(trial_id, 1);
	};
	return solution;
}

//subroutine to count the number of passing input-output examples.
Solver int count_passing_inputs(Program program, File file)
{
	int score = 0;
	int row_id = 0;
	int n = file.size();
	while(row_id < n){
	//for(int row_id = 0; row_id < file.size();i++){
	    Input input = file.get(row_id);
		bool success = passes(program, input);
		// try{ // try to run the input-output example file[row_id] on the solution
		//	program(file[row_id]);
		//}
		//exception(FailedAssert failed_assert){
		//	// if it thorws a FailedAssert, then it didn't pass.
		//	success = false;
		//}
		if(success == true){
			score = plus(score, 1);
		};
		row_id = plus(row_id, 1);
	};
	return score;
}