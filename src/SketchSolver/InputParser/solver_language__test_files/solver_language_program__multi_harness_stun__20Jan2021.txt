pragma options "--bnd-unroll-amnt 197";
pragma options "--fe-output-code";
pragma options "--bnd-arr-size 197";

struct Data
{
    int num_bools;
    bit[num_bools] bools;
}

void print_not() {}
void print_unit(int id){}

generator bit unit(Data data)
{
    bit not = ??;
    if(not)
    {
        print_not();
    }
    int bool_id = ??(8);
    print_unit(bool_id);
    if(not){
        if(data.bools[bool_id])
        {
            return 0;
        }
        else
        {
            return 1;
        }
    }
    else{
        return data.bools[bool_id];
    }
}

generator bit and_rec(Data data, bit rez, int length)
{
    assert(length >= 1);
    if(!unit(data))
    {
        rez = 0;
    }
    if(length >= 2)
    {
        bit cont = ??;
        if(cont)
        {
            return and_rec(data, rez, length-1);
        }
        else
        {
            return rez;
        }
    }
    else
    {
        return rez;
    }
}

void print_init_and(){}
void print_end_and(){}

generator bit and(Data data, int length)
{
    assert(length >= 1);
    print_init_and();
    bit rez = and_rec(data, 1, length);
    print_end_and();
    return rez;
}

generator bit or_rec(Data data, bit rez, int length)
{
    assert(length >= 1);
    if(unit(data))
    {
        rez = 1;
    }
    if(length >= 2)
    {
        bit cont = ??;
        if(cont)
        {
            return or_rec(data, rez, length-1);
        }
        else
        {
            return rez;
        }
    }
    else
    {
        return rez;
    }
}

void print_init_or(){}
void print_end_or(){}

generator bit or(Data data, int length)
{
    print_init_or();
    bit ret = or_rec(data, 0, length);
    print_end_or();
    return ret;
}

generator bit and_of_or_rec(Data data, bit rez, int length, int or_length)
{
    assert(length >= 1);
    if(!or(data, or_length))
    {
        rez = 0;
    }
    if(length >= 2)
    {
        bit cont = ??;
        if(cont)
        {
            return and_of_or_rec(data, rez, length-1, or_length);
        }
        else
        {
            return rez;
        }
    }
    else
    {
        return rez;
    }
}

generator bit and_of_or(Data data, int length, int or_length)
{
    print_init_and();
    bit ret = and_of_or_rec(data, 1, length, or_length);
    print_end_and();
    return ret;
}

generator bit or_of_and_rec(Data data, bit rez, int length, int and_length)
{
    assert(length >= 1);
    if(and(data, and_length))
    {
        rez = 1;
    }
    if(length >= 2)
    {
        bit cont = ??;
        if(cont)
        {
            return or_of_and_rec(data, rez, length-1, and_length);
        }
        else
        {
            return rez;
        }
    }
    else
    {
        return rez;
    }
}

generator bit or_of_and(Data data, int length, int and_length)
{
    print_init_or();
    bit ret = or_of_and_rec(data, 0, length, and_length);
    print_end_or();
    return ret;
}

generator bit choice_of_subtree_d_1(Data data, int length)
{
    return {|and(data, length) | or(data, length)|};
}

generator bit choice_of_subtree_d_2(Data data, int length0, int length1)
{
    return {|and_of_or(data, length0, length1) | or_of_and(data, length0, length1)|};
}

void print_init_if();
void print_end_if();

generator bit predicate(Data data, int l0, int l1)
{
    return choice_of_subtree_d_2(data, l1, l0);
}

bit condition(Data data, int l0, int l1) {return 0;}

bit left_predicate(Data data, int l0, int l1) {return 0;}

bit right_predicate(Data data, int l0, int l1) {return 0;}

bit composite_predicate(Data data, int l0, int l1) {
    if(condition(data, l0, l1)) {
        return left_predicate(data, l0, l1);
    }
    else {
        return right_predicate(data, l0, l1);
    }
}

bit template_predicate_lvl0(Data data, int l0, int l1) {
    return predicate(data, l0, l1);
}

bit program(Data data, int l0, int l1) {return 0;}

@FromFile("uav_kg_big__as_bools.data")
harness void template_main(int num_bools, bit[num_bools] bools, bit out)
{
    Data data = new Data(num_bools = num_bools, bools = bools);
    int l0 = 2;
    int l1 = 2;
    assert(program(data, l0, l1) == out);
}

@FromFile("uav_kg_big__as_bools.data")
harness void dummy_main(int num_bools, bit[num_bools] bools, bit out)
{
    Data data = new Data(num_bools = num_bools, bools = bools);
    int l0 = 2;
    int l1 = 2;
    assert(template_predicate_lvl0(data, l0, l1) == out);
    assert(composite_predicate(data, l0, l1) == out);
}