{-# LANGUAGE Arrows,
             BangPatterns,
             ConstraintKinds,
             DeriveDataTypeable,
             EmptyDataDecls,
             FlexibleContexts,
             FlexibleInstances, ForeignFunctionInterface,
             FunctionalDependencies,
             GADTs,
             GeneralizedNewtypeDeriving,
             ImpredicativeTypes,
             MultiParamTypeClasses,
             NamedFieldPuns,
             NoMonomorphismRestriction,
             RankNTypes,
             ScopedTypeVariables,
             StandaloneDeriving,
             TemplateHaskell,
             TupleSections,
             TypeFamilies,
             TypeOperators,
             TypeSynonymInstances,
             ViewPatterns #-}

module CegisCApi (
    -- * Types
    BNType (..),
    -- * API
    -- ** Initialize the command line
    cmdline_args,
    cl_get_in_name,
    cl_set_in_name,
    cl_get_out_name,
    -- ** Start running the backend
    strip_sketches_lines,
    runDriver,
    getEnvt,
    -- ** Actual synthesis commands
    evt_get_copy,
    evt_prepare_miter,
    evt_assert_dag,
    evt_print_controls
    ) where

import Prelude hiding (id, (.))
import Control.Arrow
import Control.Applicative
import Control.Category
import Control.Monad
import Control.Monad.Trans.Class

import qualified Data.List.HT as HT

import Text.Regex.TDFA

import Text.Printf

import Foreign.Marshal.Array
import Foreign.Ptr
import Foreign.C.String
import Foreign.C.Types

{# context lib="cegis" #}
{# pointer *bool_node as BoolNode newtype #}
{# pointer *NodeVector newtype #}
{# pointer *BooleanDAG newtype #}
{# pointer *CommandLineArgs newtype #}
{# pointer *InterpreterEnvironment newtype #}
{# enum BNType {underscoreToCase} deriving (Show, Eq) #}



{- Marshaling functions -}
fromEnum' = fromIntegral . fromEnum

cStringArray :: [String] -> IO (Ptr CString)
cStringArray = newArray <=< mapM newCString




-- | You probably want to run this function first.
--   Pass it an array of arguments, like
--
-- > cmdline_args [ "--verbosity", "5", "infile", "outfile" ]
cmdline_args :: [String] -> IO CommandLineArgs
cmdline_args x = do
    res <- cmdline_args_ (length x) =<< cStringArray x
    res <$ cl_set_global_params res

-- helpers
{# fun cmdline_args as cmdline_args_
    { `Int', id `(Ptr CString)' } -> `CommandLineArgs' id #}
{# fun cl_set_global_params
    { id `CommandLineArgs' } -> `()' #}

-- | Get the input filename, as parsed by cegis command line handler.
{# fun cl_get_in_name { id `CommandLineArgs' } -> `String' peekCAString* #}

{# fun cl_set_in_name { id `CommandLineArgs', `String' } -> `()' #}

-- | Get the output filename, as parsed by cegis command line handler.
{# fun cl_get_out_name { id `CommandLineArgs' } -> `String' peekCAString* #}



-- | Call this after 'cmdline_args'. Reads a program from the input filename,
-- creates a DAG (circuit representation), and starts solving if there are
-- any \"assert ... SKETCHES ...;\" lines present.
{# fun runDriver { } -> `()' #}

-- | Get the C-global environment generated by 'runDriver'
{# fun getEnvt { } -> `InterpreterEnvironment' id #}

-- | Get a copy of a function's DAG
{# fun evt_get_copy { id `InterpreterEnvironment', `String' } -> `BooleanDAG' id #}

-- | DAG representing the assertion \"forall in. spec(in) == sketch(in)\". Arguments:
--
-- > evt_prepare_miter spec sketch
{# fun evt_prepare_miter {
    id `InterpreterEnvironment', id `BooleanDAG', id `BooleanDAG' }
    -> `BooleanDAG' id #}

-- | Solves a DAG, usually the output of 'evt_prepare_miter'
{# fun evt_assert_dag {
    id `InterpreterEnvironment', id `BooleanDAG' } -> `Int' #}

-- | Write the current solutions to a filename
{# fun evt_print_controls {
    id `InterpreterEnvironment', `String' } -> `()' #}



-- marshalling vectors
unpackNodeVec :: NodeVector -> IO [BoolNode]
unpackNodeVec nv = do
    l <- node_vec_size nv
    forM [1..l] (node_vec_get nv)
{# fun node_vec_size { id `NodeVector' } -> `Int' #}
{# fun node_vec_get { id `NodeVector', `Int' } -> `BoolNode' id #}

{# fun bdag_get_nodes_by_type as get_nodes_by_type_
    { id `BooleanDAG', fromEnum' `BNType' } -> `[BoolNode]' unpackNodeVec* #}


-- | Pair containing a sketch and a specification
data SketchSpec = SketchSpec {
    sketch :: String,
    spec :: String }
    deriving (Eq, Show, Ord)

-- | Strip \"assert ... SKETCHES ...\" from the file.
-- Effectively prevents runDriver from doing anything
-- until you call 'evt_prepare_miter' later. Common usage:
--
-- @
--     in_nme <- cl_get_in_name cli
--     (in_nme', sketches) <- strip_sketches_lines in_nme
--     cl_set_in_name cli in_nme' -- use the new name
-- @
strip_sketches_lines fn@((++ ".fcns-only") -> fn') = do
    ls <- lines <$> readFile fn
    let re = "^assert ([a-zA-Z0-9_]+) SKETCHES ([a-zA-Z0-9_]+);$"
        (sketches, ls') = HT.partition (=~ re) ls
    writeFile fn' (unlines ls')
    return (fn', map (untuple . (=~ re)) sketches)
    where untuple [[_, sketch, spec]] = SketchSpec sketch spec
          untuple x = error ("untuple -- unexpected input " ++ show x)


test_args = [ "--verbosity", "5", "--num-solutions", "2",
    "-o", "/home/gatoatigrado/.sketch/tmp/miniTest1.sk/solution",
    "/home/gatoatigrado/.sketch/tmp/miniTest1.sk/input.tmp" ]

data HsCegisArgs = HsCegisArgs {
    minimize :: Bool,
    num_solutions :: Integer }
defArgs = HsCegisArgs {
    minimize = False,
    num_solutions = 1 }

reparse_args :: [String] -> (HsCegisArgs, [String])
reparse_args l = go l (defArgs, []) where
    go ("--num-solutions":x:xs) = go xs . first (\args -> args { num_solutions = read x })
    go ("--minimize":xs) = go xs . first (\args -> args { minimize = True })
    go (x:xs) = second (x:) . go xs
    go [] = id

test = do
    let (args, backend_args) = reparse_args test_args
    cli <- cmdline_args backend_args

    -- strip "assert ... sketches ..." from input,
    -- set input to that new file
    nme <- cl_get_in_name cli
    (nme', sketches) <- strip_sketches_lines nme
    cl_set_in_name cli nme'

    outname <- (\x (n :: Integer) -> printf "%s-%03d" x n) <$>
        cl_get_out_name cli

    -- build DAGs from the input functions
    runDriver
    e <- getEnvt

    -- resolve all of the DAGs
    miters <- forM sketches $ \(SketchSpec { sketch, spec }) -> do
        sk_copy <- evt_get_copy e sketch
        spec_copy <- evt_get_copy e spec
        bd <- evt_prepare_miter e spec_copy sk_copy
        evt_assert_dag e bd
        return bd

    -- write the first solution out
    evt_print_controls e (outname 0)

    forM [2..num_solutions args] $ \j -> do
        ...

    -- print "num solutions"
    -- print (num_solutions args)

    print "done"
